/*
 * Andreas Palsson, Andrew Davidson
 * 2015-01-28
 */

int check_for_commands(char * command);
void check_for_arguments(char * command, char * argument[512]);
void check_for_2nd_arguments(char * command, char * argument[512]);
int getFileSectorCount(char * fileName);

char * commands[4]; 

int main(void) {
	
char buffer[512];
	char argument[7];
	char argument2[7];
	char argumentArr[6];
	char argument2Arr[6];
	int i;
	char sectorString[6];
	char file[13312];
	int sectors = 0;

	argument = argumentArr;
	argument2 = argument2Arr;

	commands[0] = "type \0";
	commands[1] = "execute \0";
	commands[2] = "delete \0";
	commands[3] = "copy \0";
	commands[4] = "dir\0";
	while(1) {
		interrupt(0x21, 0, "SHELL> \0", 0, 0);
		interrupt(0x21, 1, buffer, 0, 0);
		i = check_for_commands(buffer);
		if(i >= 0) {
			check_for_arguments(buffer, &argument);
			interrupt(0x21, 0, a, 0, 0);
			argument[6] = '\0';
			if(i == 0) {
				interrupt(0x21, 3, argument, file, 0);
				interrupt(0x21, 0, file, 0, 0);
			} else if(i == 1) {
				interrupt(0x21, 4, argument, 0x2000, 0);
			}	else if(i == 2) {
				interrupt(0x21, 7, argument, 0, 0);
			} else if(i == 3) {

				int k;
				int directory[512];
				interrupt(0x21, 2, directory, 2, 0);

				interrupt(0x21, 0, argument, 0, 0);
				interrupt(0x21, 3, argument, file, 0);
<<<<<<< .mine


=======
				sectors = getFileSectorCount(argument);
>>>>>>> .r103
				check_for_2nd_arguments(buffer, &argument2);
				argument2[6] = '\0';
<<<<<<< .mine
=======
				interrupt(0x21, 0, argument, 0, 0);
				interrupt(0x21, 0, argument2, 0, 0);
>>>>>>> .r103

<<<<<<< .mine
				sectors = 0;
				for(k = 0; directory[i+6+k] != 0x0 && k< 26; k++) {
					sectors++; 
        }
				sectors++;  
				
				interrupt(0x21, 0, file, 0, 0);
				interrupt(0x21, 0, argument2, 0, 0);
				interrupt(0x21, 8, argument2, file, sectors);
=======
				
			

				sectorString[0]='Z';
				sectorString[1]='z';
				sectorString[2]=sectors+48;
				sectorString[3]='\n';
				sectorString[4]='\r';
				sectorString[5]='\0';


				

				interrupt(0x21,0, sectorString, 0, 0);
				interrupt(0x21, 8, argument2, file, sectors);
>>>>>>> .r103
			}else if(i == 4){
				interrupt(0x21, 9, 0, 0, 0);
			}
				
		} else 
			interrupt(0x21, 0, "Bad command! \n\r\0", 0, 0);
	}
}

int check_for_commands(char * command) {
	int number_of_commands = 5;
	int i;
	for(i = 0; i < number_of_commands; i++) {
		if(strcompare(commands[i], command)) {
			return i;
		}
	}
	return -1;
}

void check_for_arguments(char * command, char * argument[7]) {
	int i;
	int j = 0;
	char arg[7];
	for(i = 0; command[i] != ' '; i++);
	i += 1;

	for(; command[i] != 0xa; i++) {
		arg[j] = command[i];
		j++;
	}
	arg[j] = '\0';
	for(i = 0; i < 7; i++) {
		(*argument)[i] = arg[i];
	}
	for(; j < 7; j++) {
		(*argument)[j] = arg[j];
	}
}

void check_for_2nd_arguments(char * command, char * argument[7]) {
	int spacesFound = 0;
	int i;
	int j = 0;
	char arg[7];
	for(i = 0; ; i++) {
		if(command[i] == ' ')
			spacesFound++;
		if(spacesFound == 2) {
			i++;
			break;
		}
	}
	
	for(; command[i] != 0xa; i++) {
		arg[j] = command[i];
		j++;
	}
	arg[j] = '\0';
	for(i = 0; i < 7; i++) {
		(*argument)[i] = arg[i];
	}
	for(; j < 7; j++) {
		(*argument)[j] = arg[j];
	}
}

int strcompare(char * str1, char * str2) {
	int i;
	for(i = 0; str1[i] != '\0' && str2[i] != '\0'; i++) {
		if(str1[i] != str2[i])
			return 0;
	}	
	return 1;
}

int getFileSectorCount(char * fileName){
	int i;
	int j;
	int k;
	int sectorCount = 0;
	char directory[512];
	interrupt(0x21, 2, directory, 2, 0);
	for(i = 0; i < 512; i += 32) {
		for(j = 0; j<6; j++) {
			if(fileName[j] != directory[i + j]) 
				break;				
			
			if(j == 5) {
				for(k = 0; directory[i+6+k] != 0x0 && k< 26; k++) {
					sectorCount++;
				}		
				return sectorCount;
			}
		}
	}

return sectorCount;
}

